module(name = "intrinsic_template")

bazel_dep(name = "ai_intrinsic_sdks")
archive_override(
    module_name = "ai_intrinsic_sdks",
    strip_prefix = "sdk-1.18.20250421/",
    urls = ["https://github.com/intrinsic-ai/sdk/archive/refs/tags/v1.18.20250421.tar.gz"],
)

# Direct dependencies
bazel_dep(name = "abseil-cpp", version = "20240116.2", repo_name = "com_google_absl")
bazel_dep(name = "abseil-py", version = "2.1.0", repo_name = "com_google_absl_py")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "googletest", version = "1.15.2", repo_name = "com_google_googletest")
bazel_dep(name = "grpc", version = "1.66.0", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "platforms", version = "0.0.9")
bazel_dep(name = "protobuf", version = "26.0.bcr.2", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_go", version = "0.49.0", repo_name = "io_bazel_rules_go")  # TODO Remove once we use a fix in rules_go
bazel_dep(name = "rules_python", version = "1.0.0")

# C++ toolchain
bazel_dep(name = "toolchains_llvm", version = "1.1.2")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "19.1.0",
)

non_module_deps = use_extension("@ai_intrinsic_sdks//bazel:non_module_deps.bzl", "non_module_deps_ext")
use_repo(non_module_deps, "com_googleapis_storage_chrome_linux_amd64_sysroot")

llvm.sysroot(
    label = "@com_googleapis_storage_chrome_linux_amd64_sysroot//:all_files",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

# Google API bindings
bazel_dep(name = "googleapis", version = "0.0.0-20240326-1c8d509c5", repo_name = "com_google_googleapis")

switched_rules = use_extension("@com_google_googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(
    cc = True,
    go = True,
    grpc = True,
    python = True,
)
use_repo(switched_rules, "com_google_googleapis_imports")

# OCI images
bazel_dep(name = "rules_oci", version = "2.0.0")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

use_repo(
    oci,
    "distroless_base",
)

# Python and pip setup
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi_deps",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pypi_deps")

# Go and gazelle setup
go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.0")

bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_eclipse_paho_mqtt_golang",
    "org_golang_google_grpc",
    #"com_google_cloud_go_longrunning",
    #"org_golang_google_grpc",
    #"org_golang_google_protobuf",
)

bazel_dep(name = "rules_pkg", version = "1.0.1")
